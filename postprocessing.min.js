'use strict';THREE.BloomPass=function(a,b,d,c){a=void 0!==a?a:1;b=void 0!==b?b:25;d=void 0!==d?d:4;c=void 0!==c?c:256;var e={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat};this.renderTargetX=new THREE.WebGLRenderTarget(c,c,e);this.renderTargetY=new THREE.WebGLRenderTarget(c,c,e);void 0===THREE.CopyShader&&console.error("THREE.BloomPass relies on THREE.CopyShader");c=THREE.CopyShader;this.copyUniforms=THREE.UniformsUtils.clone(c.uniforms);this.copyUniforms.opacity.value=
a;this.materialCopy=new THREE.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:c.vertexShader,fragmentShader:c.fragmentShader,blending:THREE.AdditiveBlending,transparent:!0});void 0===THREE.ConvolutionShader&&console.error("THREE.BloomPass relies on THREE.ConvolutionShader");a=THREE.ConvolutionShader;this.convolutionUniforms=THREE.UniformsUtils.clone(a.uniforms);this.convolutionUniforms.uImageIncrement.value=THREE.BloomPass.blurx;this.convolutionUniforms.cKernel.value=THREE.ConvolutionShader.buildKernel(d);
this.materialConvolution=new THREE.ShaderMaterial({uniforms:this.convolutionUniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader,defines:{KERNEL_SIZE_FLOAT:b.toFixed(1),KERNEL_SIZE_INT:b.toFixed(0)}});this.enabled=!0;this.clear=this.needsSwap=!1};
THREE.BloomPass.prototype={render:function(a,b,d,c,e){e&&a.context.disable(a.context.STENCIL_TEST);THREE.EffectComposer.quad.material=this.materialConvolution;this.convolutionUniforms.tDiffuse.value=d;this.convolutionUniforms.uImageIncrement.value=THREE.BloomPass.blurX;a.render(THREE.EffectComposer.scene,THREE.EffectComposer.camera,this.renderTargetX,!0);this.convolutionUniforms.tDiffuse.value=this.renderTargetX;this.convolutionUniforms.uImageIncrement.value=THREE.BloomPass.blurY;a.render(THREE.EffectComposer.scene,
THREE.EffectComposer.camera,this.renderTargetY,!0);THREE.EffectComposer.quad.material=this.materialCopy;this.copyUniforms.tDiffuse.value=this.renderTargetY;e&&a.context.enable(a.context.STENCIL_TEST);a.render(THREE.EffectComposer.scene,THREE.EffectComposer.camera,d,this.clear)}};THREE.BloomPass.blurX=new THREE.Vector2(0.001953125,0);THREE.BloomPass.blurY=new THREE.Vector2(0,0.001953125);
THREE.DotScreenPass=function(a,b,d){void 0===THREE.DotScreenShader&&console.error("THREE.DotScreenPass relies on THREE.DotScreenShader");var c=THREE.DotScreenShader;this.uniforms=THREE.UniformsUtils.clone(c.uniforms);void 0!==a&&this.uniforms.center.value.copy(a);void 0!==b&&(this.uniforms.angle.value=b);void 0!==d&&(this.uniforms.scale.value=d);this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:c.vertexShader,fragmentShader:c.fragmentShader});this.enabled=!0;this.renderToScreen=
!1;this.needsSwap=!0};THREE.DotScreenPass.prototype={render:function(a,b,d,c){this.uniforms.tDiffuse.value=d;this.uniforms.tSize.value.set(d.width,d.height);THREE.EffectComposer.quad.material=this.material;this.renderToScreen?a.render(THREE.EffectComposer.scene,THREE.EffectComposer.camera):a.render(THREE.EffectComposer.scene,THREE.EffectComposer.camera,b,!1)}};
THREE.EffectComposer=function(a,b){this.renderer=a;void 0===b&&(b=new THREE.WebGLRenderTarget(window.innerWidth||1,window.innerHeight||1,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat,stencilBuffer:!1}));this.renderTarget1=b;this.renderTarget2=b.clone();this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2;this.passes=[];void 0===THREE.CopyShader&&console.error("THREE.EffectComposer relies on THREE.CopyShader");this.copyPass=new THREE.ShaderPass(THREE.CopyShader)};
THREE.EffectComposer.prototype={swapBuffers:function(){var a=this.readBuffer;this.readBuffer=this.writeBuffer;this.writeBuffer=a},containsPass:function(a){for(var b=0;b<this.passes.length;b++)if(this.passes[b]==a)return!0;return!1},removePass:function(a){for(var b=[],d=0;d<this.passes.length;d++)this.passes[d]!=a&&b.push(this.passes[d]);this.passes=b},addPass:function(a){this.passes.push(a)},insertPass:function(a,b){this.passes.splice(b,0,a)},render:function(a){this.writeBuffer=this.renderTarget1;
this.readBuffer=this.renderTarget2;var b=!1,d,c,e=this.passes.length;for(c=0;c<e;c++)if(d=this.passes[c],d.enabled){d.render(this.renderer,this.writeBuffer,this.readBuffer,a,b);if(d.needsSwap){if(b){var g=this.renderer.context;g.stencilFunc(g.NOTEQUAL,1,4294967295);this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,a);g.stencilFunc(g.EQUAL,1,4294967295)}this.swapBuffers()}d instanceof THREE.MaskPass?b=!0:d instanceof THREE.ClearMaskPass&&(b=!1)}},reset:function(a){void 0===a&&(a=
this.renderTarget1.clone(),a.width=window.innerWidth,a.height=window.innerHeight);this.renderTarget1=a;this.renderTarget2=a.clone();this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2},setSize:function(a,b){var d=this.renderTarget1.clone();d.width=a;d.height=b;this.reset(d)}};THREE.EffectComposer.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);THREE.EffectComposer.quad=new THREE.Mesh(new THREE.PlaneGeometry(2,2),null);THREE.EffectComposer.scene=new THREE.Scene;THREE.EffectComposer.scene.add(THREE.EffectComposer.quad);
THREE.FilmPass=function(a,b,d,c){void 0===THREE.FilmShader&&console.error("THREE.FilmPass relies on THREE.FilmShader");var e=THREE.FilmShader;this.uniforms=THREE.UniformsUtils.clone(e.uniforms);this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader});void 0!==c&&(this.uniforms.grayscale.value=c);void 0!==a&&(this.uniforms.nIntensity.value=a);void 0!==b&&(this.uniforms.sIntensity.value=b);void 0!==d&&(this.uniforms.sCount.value=d);
this.enabled=!0;this.renderToScreen=!1;this.needsSwap=!0};THREE.FilmPass.prototype={render:function(a,b,d,c){this.uniforms.tDiffuse.value=d;this.uniforms.time.value+=c;THREE.EffectComposer.quad.material=this.material;this.renderToScreen?a.render(THREE.EffectComposer.scene,THREE.EffectComposer.camera):a.render(THREE.EffectComposer.scene,THREE.EffectComposer.camera,b,!1)}};THREE.MaskPass=function(a,b){this.scene=a;this.camera=b;this.clear=this.enabled=!0;this.inverse=this.needsSwap=!1};
THREE.MaskPass.prototype={render:function(a,b,d,c){c=a.context;c.colorMask(!1,!1,!1,!1);c.depthMask(!1);var e,g;this.inverse?(e=0,g=1):(e=1,g=0);c.enable(c.STENCIL_TEST);c.stencilOp(c.REPLACE,c.REPLACE,c.REPLACE);c.stencilFunc(c.ALWAYS,e,4294967295);c.clearStencil(g);a.render(this.scene,this.camera,d,this.clear);a.render(this.scene,this.camera,b,this.clear);c.colorMask(!0,!0,!0,!0);c.depthMask(!0);c.stencilFunc(c.EQUAL,1,4294967295);c.stencilOp(c.KEEP,c.KEEP,c.KEEP)}};
THREE.ClearMaskPass=function(){this.enabled=!0};THREE.ClearMaskPass.prototype={render:function(a,b,d,c){a=a.context;a.disable(a.STENCIL_TEST)}};THREE.RenderPass=function(a,b,d,c,e){this.scene=a;this.camera=b;this.overrideMaterial=d;this.clearColor=c;this.clearAlpha=void 0!==e?e:1;this.oldClearColor=new THREE.Color;this.oldClearAlpha=1;this.clear=this.enabled=!0;this.needsSwap=!1};
THREE.RenderPass.prototype={__render:function(a,b,d,c,e,g){a.overrideMaterial=this.overrideMaterial;this.clearColor&&(this.oldClearColor.copy(b.getClearColor()),this.oldClearAlpha=b.getClearAlpha(),b.setClearColor(this.clearColor,this.clearAlpha));b.render(a,this.camera,c,g);this.clearColor&&b.setClearColor(this.oldClearColor,this.oldClearAlpha);a.overrideMaterial=null},render:function(a,b,d,c){if(this.scene instanceof Array)for(var e=0;e<this.scene.length;e++)this.__render(this.scene[e],a,b,d,c,
this.clear&&0==e);else this.__render(this.scene,a,b,d,c,this.clear)}};
THREE.SavePass=function(a){void 0===THREE.CopyShader&&console.error("THREE.SavePass relies on THREE.CopyShader");var b=THREE.CopyShader;this.textureID="tDiffuse";this.uniforms=THREE.UniformsUtils.clone(b.uniforms);this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:b.vertexShader,fragmentShader:b.fragmentShader});this.renderTarget=a;void 0===this.renderTarget&&(this.renderTargetParameters={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat,stencilBuffer:!1},
this.renderTarget=new THREE.WebGLRenderTarget(window.innerWidth,window.innerHeight,this.renderTargetParameters));this.enabled=!0;this.clear=this.needsSwap=!1};THREE.SavePass.prototype={render:function(a,b,d,c){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=d);THREE.EffectComposer.quad.material=this.material;a.render(THREE.EffectComposer.scene,THREE.EffectComposer.camera,this.renderTarget,this.clear)}};
THREE.ShaderPass=function(a,b){this.textureID=void 0!==b?b:"tDiffuse";this.uniforms=THREE.UniformsUtils.clone(a.uniforms);this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader});this.renderToScreen=!1;this.needsSwap=this.enabled=!0;this.clear=!1};
THREE.ShaderPass.prototype={render:function(a,b,d,c){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=d);THREE.EffectComposer.quad.material=this.material;this.renderToScreen?a.render(THREE.EffectComposer.scene,THREE.EffectComposer.camera):a.render(THREE.EffectComposer.scene,THREE.EffectComposer.camera,b,this.clear)}};
THREE.TexturePass=function(a,b){void 0===THREE.CopyShader&&console.error("THREE.TexturePass relies on THREE.CopyShader");var d=THREE.CopyShader;this.uniforms=THREE.UniformsUtils.clone(d.uniforms);this.uniforms.opacity.value=void 0!==b?b:1;this.uniforms.tDiffuse.value=a;this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:d.vertexShader,fragmentShader:d.fragmentShader});this.enabled=!0;this.needsSwap=!1};
THREE.TexturePass.prototype={render:function(a,b,d,c){THREE.EffectComposer.quad.material=this.material;a.render(THREE.EffectComposer.scene,THREE.EffectComposer.camera,d)}};
THREE.GodRaysPass=function(a,b,d,c){this.scene=b;this.camera=c;this.config=a;this.clear=this.enabled=!0;this.needsSwap=!1;var e,g,m,q,r,n,k,s,l,u;a=window.innerHeight||2;var v=new THREE.MeshDepthMaterial,w=new THREE.Projector;e=new THREE.Scene;g=new THREE.OrthographicCamera(window.innerWidth/-2,window.innerWidth/2,a/2,a/-2,-1E4,1E4);g.position.z=100;e.add(g);var f={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat};m=new THREE.WebGLRenderTarget(window.innerWidth,a,f);
q=new THREE.WebGLRenderTarget(window.innerWidth,a,f);var p=window.innerWidth/4,t=a/4;r=new THREE.WebGLRenderTarget(p,t,f);n=new THREE.WebGLRenderTarget(p,t,f);f=THREE.ShaderGodRays.godrays_generate;k=THREE.UniformsUtils.clone(f.uniforms);s=new THREE.ShaderMaterial({uniforms:k,vertexShader:f.vertexShader,fragmentShader:f.fragmentShader});f=THREE.ShaderGodRays.godrays_combine;l=THREE.UniformsUtils.clone(f.uniforms);u=new THREE.ShaderMaterial({uniforms:l,vertexShader:f.vertexShader,fragmentShader:f.fragmentShader});
l.fGodRayIntensity.value=0.75;a=new THREE.Mesh(new THREE.PlaneGeometry(window.innerWidth,a),s);a.position.z=-9900;e.add(a);this.setIntensity=function(a){l.fGodRayIntensity.value=a};this.render=function(a,f,p,h,t){f=this.config.sunlightDirection;h=null;"Directional"===this.config.lightingType?(h=new THREE.Vector3(-5E3,0,0),h.rotateY(Math.PI/180*f)):h=new THREE.Vector3(0,0,0);f=h;h=new THREE.Vector3(0,0,0);h.copy(f);w.projectVector(h,c);h.x=(h.x+1)/2;h.y=(h.y+1)/2;k.vSunPositionScreenSpace.value.x=
h.x;k.vSunPositionScreenSpace.value.y=h.y;a.clearTarget(m,!0,!0,!1);b.overrideMaterial=null;a.render(d,c,m);a.render(b,c,m);b.overrideMaterial=v;a.render(b,c,q,!0);f=1*Math.pow(6,-1);k.fStepSize.value=f;k.tInput.value=q;e.overrideMaterial=s;a.render(e,g,n);f=1*Math.pow(6,-2);k.fStepSize.value=f;k.tInput.value=n;a.render(e,g,r);f=1*Math.pow(6,-3);k.fStepSize.value=f;k.tInput.value=r;a.render(e,g,n);l.tColors.value=m;l.tGodRays.value=n;e.overrideMaterial=u;a.render(e,g,p,!0);e.overrideMaterial=null}};
